<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
 
 
<!--   Hemos definido un DataSource con comodines para los valores de configuración.  -->
<!--   Sus valores serán tomados de un archivo de propiedades en tiempo de ejecución.  -->
<!--   El bean property-placeholder que hemos declarado leerá este archivo de propiedades y sustituirá cada comodín  -->
<!--   con su valor actual.  -->
<!--   Esto es conveniente puesto que separa los valores de conexión en su propio archivo,  -->
<!--   y estos valores a menudo suelen ser cambiados durante el despliegue de la aplicación.  -->
<!--   Vamos a poner este nuevo archivo .PROPERTIES = jdbc.properties  -->
<!--   tanto en el directorio 'src/test/resources' como en el directorio 'webapp/WEB-INF/classes'   -->
<!--   por lo que estará disponible cuando ejecutemos los tests y cuando despleguemos la aplicación web.  -->
 
 
    <!-- holding properties for database connectivity /-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- enabling annotation driven configuration /-->
    <context:annotation-config/>
 
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <property name="driverClassName" value="${jdbc.driverClassName}"/>
      <property name="url" value="${jdbc.url}"/>
      <property name="username"  value="${jdbc.username}"/>
      <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="entityManagerFactory"
	class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
	p:dataSource-ref="dataSource"
	p:jpaVendorAdapter-ref="jpaAdapter">
	<property name="loadTimeWeaver">
          <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
        </property>                             
        <property name="persistenceUnitName" value="springappPU"></property>
    </bean>
	 
    <bean id="jpaAdapter"
	class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
	p:database="${jpa.database}"
	p:showSql="${jpa.showSql}"/>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
	p:entityManagerFactory-ref="entityManagerFactory"/>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- Scans the classpath of this application for @Components to deploy as beans -->
    <context:component-scan base-package="com.starkindustries.springapp.repository" />
    <context:component-scan base-package="com.starkindustries.springapp.service" />

</beans>